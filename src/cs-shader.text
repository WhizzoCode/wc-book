@metadata...
title: WebGL shader preview
type: chapter
...metadata

WebGL itself is not a very good API &mdash; conceptually it follows directly from the OpenGL ES API, which was written in C and defined as a state machine. It's familiar to graphics programmers, and that's about all it has going for it. Which is a shame, since hidden behind that intimidating facade is a fascinating creative environment: fragment shaders.

Fragment shaders are small programs that run for every pixel in a WebGL polygon. They're typically used to do things like texturing and lighting within a 3D scene. Your video card is extremely good at running thousands (or even million) of these programs in parallel, with certain tradeoffs: they can't directly share information with each other, and they can't retain state between executions.

Despite these constraints, you can do incredible things just with a fragment shader and some basic math (Inigo Quilez is a <a href="https://www.youtube.com/watch?v=8--5LwHRhjk">well-known master</a> of this). You can see more examples at <a href="https://www.shadertoy.com/">Shadertoy</a>, and learn how to write your own from <a href="https://thebookofshaders.com/">The Book of Shaders</a>. But be careful: like a great puzzle game, fragment shaders can be addictive!

I've been hooked for a few years now, but while I love writing shaders (I even made <a href="https://github.com/thomaswilburn/shadertab">a browser extension</a> that lets you fiddle with them in the new tab page) I don't love the WebGL boilerplate. What I really wanted was an element that would let me load a fragment shader and display it the same way that I would an image: set the "src" attribute and see the results. For an NPR project that needed some visual spice, I finally create it via this custom element.

@subhead `shader-box.js`

@includeCode(js) examples/shader-box.js

@subhead Demo

@html <script type="module">
@include examples/custom-element.js
@include examples/shader-box.js
@html... 
</script>
<style>
  .demo-shader {
    width: 100%;
    height: 500px;
    max-height: 60vh;
    margin: auto;
  }
</style>
<shader-box class="demo-shader" src="./static/lava.glsl">
  <shader-uniform name="u_color" values="0.3,0.6,0.6"></shader-uniform>
</shader-box>
...html

@subhead Notes

Knowing how WebGL works isn't a prerequisite for talking about this element. However, if you're curious, I've found <a href="https://webglfundamentals.com">WebGL Fundamentals</a> to be one of the best tutorials on the subject.

@subsubhead Cancelling requests

Loading shaders from the network by setting the "src" attribute is relatively straightforward: when we get the `attributeChangedCallback()` notification, we just `fetch()` the file and feed its contents to `setShader()`. However, what if we were to set it multiple times in rapid succession? We would expect only the final value to be loaded, since that's how `<img>` and other tags work, but depending on how fast the network responded (and in which order), we could get very different results as the rest of the callback runs.

To avoid this scenario (and to let us override a remote shader when we call `setShader()` directly), we need to cancel any pending requests when the attribute is updated. Surprisingly, the `fetch()` API did not initially ship with a way to cancel requests &mdash; it's based on Promises, and there's no way to reject a standard Promise from outside of itself. Several methods were explored, and the eventual winner was the creation of Abort Controllers, which let you pass a signal into one or more requests and then cancel them all at once.

Essentially, we create a new `AbortController` instance for every fetch, storing it on `this.requesting`. If there was already a controller there, we call its `abort()` method to cancel the previous request (if it already completed successfully, nothing will happen). Once the request completes, we nullify `this.requesting` to clean up a little, and keep `setShader()` from sending pointless abort signals.

One thing that can trip you up is that aborting a fetch is treated as a thrown exception. This can be surprising at first, because `fetch()` as an API does not typically throw where you'd expect it to &mdash; things like `404` status codes are seen as a "successful" fetch (in that the network request completed), even if the result actually represents an error. To keep us from having one path for "real" errors and one for abort signals, we throw exceptions on 400+ status codes, so that everything can be handled in the `catch` clause for the fetch.

@subsubhead Observation patterns

This element has a couple of observers connected to it, both set up in the constructor. It uses an Intersection Observer to track its own visibility, and only renders if it's actually in view. WebGL shaders do not have to be strenuous on modern hardware, but there's no reason to do extra work &mdash; and since fragment shaders don't have any memory between executions, we don't have to worry about losing anything while the render loop is "paused."

We also define a small domain-specific language for this element, currently composed only of `<shader-uniform>` elements. These set "uniforms" within the fragment shader, which is WebGL jargon for global values accessible to all fragments. A Mutation Observer watches the custom element and its subtree for node and attribute changes, and runs our `onMutation()` method if it sees them. 

Since there can be multiple uniforms per shader and they can have any name you want, it's easier to represent these as child elements than as attributes on the `<shader-box>` itself. In the demo above, we're just passing a single `u_color` uniform through, which tweaks the color of the "lava lamp" animation. 

@codeblock(html)...
<shader-box class="demo-shader" src="./static/lava.glsl">
  <shader-uniform
    name="u_color"
    values="0.3,0.6,0.6"
  ></shader-uniform>
</shader-box>
...codeblock

Using the dev tools, you can update the values to see it shift (the colors are an RGB triplet with values from 0 to 1).



@subsubhead Future improvements

One of the reasons that I'm a strong advocate for using patterns that already exist in the platform, besides taking advantage of existing developer knowledge, is that it allows our code to interoperate more easily with the platform. For example, if you have code that is tuned to work with `<video>` in terms of the basic events and properties it expects, it will also usually work with `<audio>` (which also implements the `MediaElement` interface), or with any other media element that browsers might add.

Our WebGL code is not quite the same as a media tag &mdash; for one thing, it doesn't have a beginning, end, or current time. However, there are some similarities. It might make sense to add common events, methods, and properties to our tag to permit it a little extra control. For example, we might support the `play()` method and the `paused` property, so that controls could toggle the animation and reflect its current state. We might also add loading events, so that other code on the page could know when the animation is ready to go (useful for lazy-loading).

In terms of WebGL, the other natural extension point would be to expand the range of inputs available via child elements. In addition to the uniform values currently supported, we could automatically load `<img>` tags as textures, or even feed in `<video>` and `<audio>` as buffers for shaders to access.

A richer set of tools exposed through a domain-specific language isn't just useful for fragment shader developers. It also expands the potential uses of this element. For example, a shader can easily replicate filters from something like Photoshop or Premiere. By providing a basic manipulation shader and a comprehensive DSL for inputs, it would be possible for people who only know HTML to embed a video with tweakable effects applied. 